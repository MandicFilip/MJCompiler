package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, NEW, ENUM, RETURN;
terminal PRINT, READ, CONST, VOID, IF, ELSE, FOR, BREAK, CONTINUE;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL, UNEQUAL, GREATER;
terminal GREATER_EQUAL, SMALLER, SMALLER_EQUAL, AND, OR, ASSIGNMENT;
terminal INC, DEC, SEMI, COMMA, DOT, LBRACE, RBRACE, LSQBRACE;
terminal RSQBRACE, LPAREN, RPAREN;
terminal String IDENT;
terminal Character CHARCONST;
terminal Integer NUMBER;
terminal Boolean BOOL_CONST;

nonterminal AllDeclList AllDeclList;
nonterminal DeclType DeclType;
nonterminal ConstDeclExpression ConstDeclExpression;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal ConstKind ConstKind;
nonterminal NumberConst NumberConst;
nonterminal VarDeclExpression VarDeclExpression;
nonterminal VarsList VarsList;
nonterminal VarDecl VarDecl;
nonterminal OptVars OptVars;
nonterminal ArrOpt ArrOpt;
nonterminal EnumDecl EnumDecl;
nonterminal EnumList EnumList;
nonterminal EnumMember EnumMember;
nonterminal EnumInit EnumInit;
nonterminal VarDeclExpressionList VarDeclExpressionList;
nonterminal RetType RetType;
nonterminal FormParams FormParams;
nonterminal FormPara FormPara;
nonterminal MethodDeclList MethodDeclList;
nonterminal Statements Statements;
nonterminal Statement Statement;
nonterminal FirstOptDesignator FirstOptDesignator;
nonterminal SecondOptDesignator SecondOptDesignator;
nonterminal OptDesignatorStatement OptDesignatorStatement;
nonterminal OptCondition OptCondition;
nonterminal ExpressionToPrint ExpressionToPrint;
nonterminal DesignatorStmt DesignatorStmt;
nonterminal IfConditionForm IfConditionForm;
nonterminal IfStart IfStart;
nonterminal ElsePart ElsePart;
nonterminal ForStart ForStart;
nonterminal ForOptCondition ForOptCondition;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal ActualParametar ActualParametar;
nonterminal AssignOp AssignOp;
nonterminal RelOp RelOp;
nonterminal Addop Addop;
nonterminal MulOp MulOp;

nonterminal MethodDecl MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, CondTerm, CondFact, SignTerm, ConditionDecl;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, EnumStart, MethodStart, Designator, MethodCallStart, MethodCall, ArrayName;

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName:P1 AllDeclList:A2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, A2, M3); RESULT.setLine(P1left); :};

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :};

AllDeclList ::= (ALLDeclarationsList) AllDeclList:A1 DeclType:D2 {: RESULT=new ALLDeclarationsList(A1, D2); RESULT.setLine(A1left); :}
              | (NoDeclaration) {: RESULT=new NoDeclaration(); :}
              ;

DeclType ::= (ConstTypeDeclaration) ConstDeclExpression:C1 {: RESULT=new ConstTypeDeclaration(C1); RESULT.setLine(C1left); :}
           | (VarTypeDeclaration) VarDeclExpression:V1 {: RESULT=new VarTypeDeclaration(V1); RESULT.setLine(V1left); :}
           | (EnumTypeDeclaration) EnumDecl:E1 {: RESULT=new EnumTypeDeclaration(E1); RESULT.setLine(E1left); :}
           ;


Type ::= (Type) IDENT:tName {: RESULT=new Type(tName); RESULT.setLine(tNameleft); :};


ConstDeclExpression ::= (ConstDeclarationExpression) CONST Type:constType ConstDeclList:C1 SEMI {: RESULT=new ConstDeclarationExpression(constType, C1); RESULT.setLine(constTypeleft); :};

ConstDeclList ::= (ConstDeclarationList) ConstDeclList:C1 COMMA ConstDecl:C2 {: RESULT=new ConstDeclarationList(C1, C2); RESULT.setLine(C1left); :}
                  |
                  (SingleConstDeclaration) ConstDecl:C1 {: RESULT=new SingleConstDeclaration(C1); RESULT.setLine(C1left); :}
                  ;

ConstDecl ::= (ConstDecl) IDENT:constName ASSIGNMENT ConstKind:constValue {: RESULT=new ConstDecl(constName, constValue); RESULT.setLine(constNameleft); :};

ConstKind ::= (ConstNumber) NumberConst:numValue {: RESULT=new ConstNumber(numValue); RESULT.setLine(numValueleft); :}
            |
            (ConstChar) CHARCONST:charValue {: RESULT=new ConstChar(charValue); RESULT.setLine(charValueleft); :}
            |
            (ConstBool) BOOL_CONST:boolValue {: RESULT=new ConstBool(boolValue); RESULT.setLine(boolValueleft); :}
            ;

NumberConst ::= (JustNumber) NUMBER:value {: RESULT=new JustNumber(value); RESULT.setLine(valueleft); :}
                |
                (PositiveNumber) PLUS NUMBER:value {: RESULT=new PositiveNumber(value); RESULT.setLine(valueleft); :}
                |
                (NegativeNumber) MINUS NUMBER:value {: RESULT=new NegativeNumber(value); RESULT.setLine(valueleft); :}
                ;

OptVars ::= (OptVarsList) VarDeclExpressionList:V1 {: RESULT=new OptVarsList(V1); RESULT.setLine(V1left); :}
            |
            (NoOptVarsList) {: RESULT=new NoOptVarsList(); :}
            ;

VarDeclExpressionList ::= (OptVarDeclExpressionList) VarDeclExpressionList:V1 VarDeclExpression:V2 {: RESULT=new OptVarDeclExpressionList(V1, V2); RESULT.setLine(V1left); :}
                          |
                          (SingleOptVarDecl) VarDeclExpression:V1 {: RESULT=new SingleOptVarDecl(V1); RESULT.setLine(V1left); :}
                          ;

VarDeclExpression ::= (VarDeclarationExpression) Type:varType VarsList:V1 SEMI {: RESULT=new VarDeclarationExpression(varType, V1); RESULT.setLine(varTypeleft); :}
                      |
                      (VarDeclarationWithError) error SEMI
                      {: parser.report_error("Bad variable declaration! ", null); :} {: RESULT=new VarDeclarationWithError(); :}
                      ;

VarsList ::= (VariablesList) VarsList:V1 COMMA VarDecl:V2 {: RESULT=new VariablesList(V1, V2); RESULT.setLine(V1left); :}
             |
             (SigleVarDecl) VarDecl:V1 {: RESULT=new SigleVarDecl(V1); RESULT.setLine(V1left); :}
             ;

VarDecl ::= (VarDeclaration) IDENT:varName ArrOpt:A1 {: RESULT=new VarDeclaration(varName, A1); RESULT.setLine(varNameleft); :}
            |
            (ErrorVarDecl) error
            {: parser.report_error("Bad variable declaration! ", null); :} {: RESULT=new ErrorVarDecl(); :}
            ;

ArrOpt ::= (ArrayOption) LSQBRACE RSQBRACE {: RESULT=new ArrayOption(); :}
            |
            (NoArrayOption) {: RESULT=new NoArrayOption(); :}
            ;


EnumDecl ::= (EnumDecl) EnumStart:E1 LBRACE EnumList:E2 RBRACE {: RESULT=new EnumDecl(E1, E2); RESULT.setLine(E1left); :};

EnumStart ::= (EnumStart) ENUM IDENT:eName {: RESULT=new EnumStart(eName); RESULT.setLine(eNameleft); :};

EnumList ::= (EnumMembersList) EnumList:E1 COMMA EnumMember:E2 {: RESULT=new EnumMembersList(E1, E2); RESULT.setLine(E1left); :}
            | (SingleEnumMember) EnumMember:E1 {: RESULT=new SingleEnumMember(E1); RESULT.setLine(E1left); :}
            ;

EnumMember ::= (EnumMember) IDENT:enumMemberName EnumInit:E1 {: RESULT=new EnumMember(enumMemberName, E1); RESULT.setLine(enumMemberNameleft); :};

EnumInit ::= (SingleEnumInit) ASSIGNMENT NumberConst:enumMemberValue {: RESULT=new SingleEnumInit(enumMemberValue); RESULT.setLine(enumMemberValueleft); :}
              |
              (NoEnumInit) {: RESULT=new NoEnumInit(); :}
              ;

MethodDeclList ::= (MethodDeclarationList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}
					;

MethodDecl ::= (MethodDecl) MethodStart:M1 LPAREN FormParams:F2 RPAREN OptVars:O3 LBRACE Statements:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, O3, S4); RESULT.setLine(M1left); :};

MethodStart ::= (MethodStart) RetType:R1 IDENT:methodName {: RESULT=new MethodStart(R1, methodName); RESULT.setLine(R1left); :};

RetType ::= (RetVoid) VOID:retVoid {: RESULT=new RetVoid(); :}
            |
            (ReturnType) Type:retType {: RESULT=new ReturnType(retType); RESULT.setLine(retTypeleft); :};

FormParams ::= (FormParamsDeclaration) FormParams:F1 COMMA FormPara:F2 {: RESULT=new FormParamsDeclaration(F1, F2); RESULT.setLine(F1left); :}
              | (SingleFormParametarDeclaration) FormPara:F1 {: RESULT=new SingleFormParametarDeclaration(F1); RESULT.setLine(F1left); :}
              | (NoFormParamsDeclaration) {: RESULT=new NoFormParamsDeclaration(); :}
              |
              error
              {: parser.report_error("Bad formal argument  ", null); :} {: RESULT=new FormParamsDerived1(); :}
              ;

FormPara ::= (FormPara) Type:paramType IDENT:paramName ArrOpt:A1 {: RESULT=new FormPara(paramType, paramName, A1); RESULT.setLine(paramTypeleft); :};


Statements ::= (StatementList) Statements:S1 Statement:S2 {: RESULT=new StatementList(S1, S2); RESULT.setLine(S1left); :}
               |
               (NoStatementList) {: RESULT=new NoStatementList(); :}
               ;

Statement ::= (DesignatorStatement) DesignatorStmt:D1 SEMI {: RESULT=new DesignatorStatement(D1); RESULT.setLine(D1left); :}
			  |
              (AssignmentError) Designator:D1 ASSIGNMENT error SEMI:l
              {: parser.report_error("Bad assignment statement until ; on line " + lleft, null); :} {: RESULT=new AssignmentError(D1); RESULT.setLine(D1left); :}
              |
			  (IfStatement) IfStart:I1 Statement:S2 {: RESULT=new IfStatement(I1, S2); RESULT.setLine(I1left); :}
			  |
			  (IfElseStatement) IfStart:I1 Statement:S2 ElsePart:E3 Statement:S4 {: RESULT=new IfElseStatement(I1, S2, E3, S4); RESULT.setLine(I1left); :}
			  |
			  (ForStatement) ForStart:F1 Statement:S2 {: RESULT=new ForStatement(F1, S2); RESULT.setLine(F1left); :}
			  |
			  (BreakStatement) BREAK SEMI {: RESULT=new BreakStatement(); :}
			  |
			  (ContinueStatement) CONTINUE SEMI {: RESULT=new ContinueStatement(); :}
			  |
			  (ReadStatement) READ LPAREN Designator:dest RPAREN SEMI {: RESULT=new ReadStatement(dest); RESULT.setLine(destleft); :}
			  |
			  (PrintStatement) PRINT LPAREN  ExpressionToPrint:E1 RPAREN SEMI {: RESULT=new PrintStatement(E1); RESULT.setLine(E1left); :}
			  |
			  (ReturnExpStatement) RETURN Expr:retExp SEMI {: RESULT=new ReturnExpStatement(retExp); RESULT.setLine(retExpleft); :}
			  |
			  (ReturnNopStatement) RETURN SEMI {: RESULT=new ReturnNopStatement(); :}
			  |
			  (StatementBlock) LBRACE Statements:S1 RBRACE {: RESULT=new StatementBlock(S1); RESULT.setLine(S1left); :}
			  ;

IfStart ::= (IfStart) IF IfConditionForm:I1 {: RESULT=new IfStart(I1); RESULT.setLine(I1left); :};

ElsePart ::= (ElsePart) ELSE {: RESULT=new ElsePart(); :};

ForStart ::= (ForStart) FOR LPAREN FirstOptDesignator:F1 SEMI ForOptCondition:F2 SEMI SecondOptDesignator:S3 RPAREN {: RESULT=new ForStart(F1, F2, S3); RESULT.setLine(F1left); :};

FirstOptDesignator ::= (FirstOptDesignator) OptDesignatorStatement:O1 {: RESULT=new FirstOptDesignator(O1); RESULT.setLine(O1left); :};

ForOptCondition ::= (ForOptCondition) OptCondition:O1 {: RESULT=new ForOptCondition(O1); RESULT.setLine(O1left); :};

OptCondition::= (Condition) ConditionDecl:C1 {: RESULT=new Condition(C1); RESULT.setLine(C1left); :}
                |
                (NoCondition) {: RESULT=new NoCondition(); :}
                ;

SecondOptDesignator ::= (SecondOptDesignator) OptDesignatorStatement:O1 {: RESULT=new SecondOptDesignator(O1); RESULT.setLine(O1left); :};

OptDesignatorStatement ::= (SingleDesignatorStatement) DesignatorStmt:D1 {: RESULT=new SingleDesignatorStatement(D1); RESULT.setLine(D1left); :}
                           |
                           (NoDesignatorStatement) {: RESULT=new NoDesignatorStatement(); :}
                           ;

IfConditionForm ::= (IfCondition) LPAREN ConditionDecl:C1 RPAREN {: RESULT=new IfCondition(C1); RESULT.setLine(C1left); :}
                    |
                    (ConditionError) LPAREN error RPAREN:l
                    {: parser.report_error("Bad condition at line " + lleft, null); :} {: RESULT=new ConditionError(); :}
                    ;

ExpressionToPrint ::= (OnlyExpressionToPrint) Expr:exprToPrint {: RESULT=new OnlyExpressionToPrint(exprToPrint); RESULT.setLine(exprToPrintleft); :}
                      |
                      (ExpressionAndConstToPrint) Expr:exprToPrint COMMA NUMBER:value {: RESULT=new ExpressionAndConstToPrint(exprToPrint, value); RESULT.setLine(exprToPrintleft); :}
                      ;

DesignatorStmt ::= (AssignDesignatorStatement) Designator:designator AssignOp:A1 Expr:expValue {: RESULT=new AssignDesignatorStatement(designator, A1, expValue); RESULT.setLine(designatorleft); :}
                   |
                   (ErrAssignment) Designator:D1 ASSIGNMENT error SEMI
                   {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :} {: RESULT=new ErrAssignment(D1); RESULT.setLine(D1left); :}
                   |
                   (MethodCallStatement) MethodCall:M1 {: RESULT=new MethodCallStatement(M1); RESULT.setLine(M1left); :}
                   |
                   (IncDesignatorStatement) Designator:designator INC {: RESULT=new IncDesignatorStatement(designator); RESULT.setLine(designatorleft); :}
                   |
                   (DecDesignatorStatement) Designator:designator DEC {: RESULT=new DecDesignatorStatement(designator); RESULT.setLine(designatorleft); :}
                   ;

MethodCall ::= (MethodCall) MethodCallStart:M1 ActualPars:A2 RPAREN {: RESULT=new MethodCall(M1, A2); RESULT.setLine(M1left); :};

MethodCallStart ::= (MethodCallStart) Designator:designator LPAREN {: RESULT=new MethodCallStart(designator); RESULT.setLine(designatorleft); :};

ConditionDecl ::= (TermListCondition) ConditionDecl:C1 OR CondTerm:C2 {: RESULT=new TermListCondition(C1, C2); RESULT.setLine(C1left); :}
                  |
                  (SingleTermCondition) CondTerm:C1 {: RESULT=new SingleTermCondition(C1); RESULT.setLine(C1left); :}
                  ;

CondTerm ::= (CondFactListTerm) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondFactListTerm(C1, C2); RESULT.setLine(C1left); :}
             |
             (SingleCondFactTerm) CondFact:C1 {: RESULT=new SingleCondFactTerm(C1); RESULT.setLine(C1left); :}
             ;

CondFact ::= (ConditionFactor) CondFact:C1 RelOp:R2 Expr:E3 {: RESULT=new ConditionFactor(C1, R2, E3); RESULT.setLine(C1left); :}
             |
             (SingleCondFact) Expr:E1 {: RESULT=new SingleCondFact(E1); RESULT.setLine(E1left); :}
             ;

Expr ::= (TermListExpr) Expr:E1 Addop:A2 Term:T3 {: RESULT=new TermListExpr(E1, A2, T3); RESULT.setLine(E1left); :}
          |
          (SingleTermExpr) SignTerm:S1 {: RESULT=new SingleTermExpr(S1); RESULT.setLine(S1left); :}
          ;

SignTerm ::= (MinusTerm) MINUS Term:T1 {: RESULT=new MinusTerm(T1); RESULT.setLine(T1left); :}
             |
             (NoSignTerm) Term:T1 {: RESULT=new NoSignTerm(T1); RESULT.setLine(T1left); :}
             ;

Term ::= (FactorListTerm) Term:T1 MulOp:M2 Factor:F3 {: RESULT=new FactorListTerm(T1, M2, F3); RESULT.setLine(T1left); :}
         |
         (SingleFactorTerm) Factor:F1 {: RESULT=new SingleFactorTerm(F1); RESULT.setLine(F1left); :}
         ;

Factor ::= (ParenFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ParenFactor(E1); RESULT.setLine(E1left); :}
		   |
		   (CharFactor) CHARCONST:valueChar {: RESULT=new CharFactor(valueChar); RESULT.setLine(valueCharleft); :}
		   |
		   (BoolFactor) BOOL_CONST:valBool {: RESULT=new BoolFactor(valBool); RESULT.setLine(valBoolleft); :}
		   |
		   (NewTypeFactor) NEW Type:T1 LSQBRACE Expr:arrExp RSQBRACE {: RESULT=new NewTypeFactor(T1, arrExp); RESULT.setLine(T1left); :}
		   |
		   (DesignatorFactor) Designator:d {: RESULT=new DesignatorFactor(d); RESULT.setLine(dleft); :}
		   |
		   (FunCallFactor) MethodCall:M1 {: RESULT=new FunCallFactor(M1); RESULT.setLine(M1left); :}
		   |
		   (NumberFactor) NUMBER:valueNumber {: RESULT=new NumberFactor(valueNumber); RESULT.setLine(valueNumberleft); :}
		   ;

ActualPars ::= (ActualParametarsList) ActualParamList:A1 {: RESULT=new ActualParametarsList(A1); RESULT.setLine(A1left); :}
			   |
			   (NoActualParametarsList) {: RESULT=new NoActualParametarsList(); :}
			   ;

ActualParamList ::= (ParametarsList) ActualParamList:A1 COMMA ActualParametar:A2 {: RESULT=new ParametarsList(A1, A2); RESULT.setLine(A1left); :}
					 |
					 (SingleActualParametar) ActualParametar:A1 {: RESULT=new SingleActualParametar(A1); RESULT.setLine(A1left); :}
					 ;

ActualParametar ::= (ActualParametar) Expr:E1 {: RESULT=new ActualParametar(E1); RESULT.setLine(E1left); :};

Designator ::= (EnumDesignator) IDENT:designatorName DOT IDENT:enumMember {: RESULT=new EnumDesignator(designatorName, enumMember); RESULT.setLine(designatorNameleft); :}
               |
               (ArrayDesignator) ArrayName:A1 LSQBRACE Expr:arrExp RSQBRACE {: RESULT=new ArrayDesignator(A1, arrExp); RESULT.setLine(A1left); :}
               |
               (SimpleDesignator) IDENT:designatorName {: RESULT=new SimpleDesignator(designatorName); RESULT.setLine(designatorNameleft); :}
               ;

ArrayName ::= (ArrayName) IDENT:designatorName {: RESULT=new ArrayName(designatorName); RESULT.setLine(designatorNameleft); :};

AssignOp ::= (Assignment) ASSIGNMENT {: RESULT=new Assignment(); :};

RelOp ::= (Equal) EQUAL {: RESULT=new Equal(); :}
          |
          (Unequal) UNEQUAL {: RESULT=new Unequal(); :}
          |
          (Greater) GREATER {: RESULT=new Greater(); :}
          |
          (GreaterEqual) GREATER_EQUAL {: RESULT=new GreaterEqual(); :}
          |
          (Smaller)SMALLER {: RESULT=new Smaller(); :}
          |
          (SmallerEqual) SMALLER_EQUAL {: RESULT=new SmallerEqual(); :}
          ;

Addop ::= (PlusOp) PLUS {: RESULT=new PlusOp(); :}
          |
          (MinusOp) MINUS {: RESULT=new MinusOp(); :}
          ;

MulOp ::= (MulOper) MUL {: RESULT=new MulOper(); :}
          |
          (DivOp) DIV {: RESULT=new DivOp(); :}
          |
          (ModOp) MOD {: RESULT=new ModOp(); :}
          ;
