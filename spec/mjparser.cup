package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, NEW, ENUM, RETURN;
terminal PRINT, READ, CONST, VOID, IF, ELSE, FOR, BREAK, CONTINUE;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL, UNEQUAL, GREATER;
terminal GREATER_EQUAL, SMALLER, SMALLER_EQUAL, AND, OR, ASSIGNMENT;
terminal INC, DEC, SEMI, COMMA, DOT, LBRACE, RBRACE, LSQBRACE;
terminal RSQBRACE, LPAREN, RPAREN;
terminal String IDENT;
terminal Character CHARCONST;
terminal Integer NUMBER;
terminal Boolean BOOL_CONST;

nonterminal AllDeclList, DeclType, ConstDeclExpression, ConstDeclList, ConstDecl, ConstKind;
nonterminal VarDeclExpression, VarsList, VarDecl, OptVars, ArrOpt;
nonterminal EnumDecl, EnumList, EnumMember, EnumInit, VarDeclExpressionList;
nonterminal RetType, FormParams, FormPara, MethodDeclList;
nonterminal Statements, Statement, OptDesignatorStatement, OptCondition, ExpressionToPrint;
nonterminal DesignatorStmt, ConditionDecl, IfConditionForm;
nonterminal ActualPars, ActualParamList;
nonterminal AssignOp, RelOp, Addop, MulOp;

nonterminal MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, CondTerm, CondFact, SignTerm;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, EnumStart, MethodStart, Designator;

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName AllDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:pName;

AllDeclList ::= (ALLDeclarationsList) AllDeclList DeclType
              | (NoDeclaration)
              ;

DeclType ::= (ConstTypeDeclaration) ConstDeclExpression
           | (VarTypeDeclaration) VarDeclExpression
           | (EnumTypeDeclaration) EnumDecl
           ;


Type ::= (Type) IDENT:tName;


ConstDeclExpression ::= (ConstDeclarationExpression) CONST Type:constType ConstDeclList SEMI;

ConstDeclList ::= (ConstDeclarationList) ConstDeclList COMMA ConstDecl
                  |
                  (SingleConstDeclaration) ConstDecl
                  ;

ConstDecl ::= (ConstDecl) IDENT:constName ASSIGNMENT ConstKind:constValue;

ConstKind ::= (ConstNumber) NUMBER:numValue
            |
            (ConstChar) CHARCONST:charValue
            |
            (ConstBool) BOOL_CONST:boolValue
            ;

OptVars ::= (OptVarsList) VarDeclExpressionList
            |
            (NoOptVarsList)
            ;

VarDeclExpressionList ::= (OptVarDeclExpressionList) VarDeclExpressionList VarDeclExpression
                          |
                          (SingleOptVarDecl) VarDeclExpression
                          ;

VarDeclExpression ::= (VarDeclarationExpression) Type:varType VarsList SEMI;

VarsList ::= (VariablesList) VarsList COMMA VarDecl
             |
             (SigleVarDecl) VarDecl
             ;

VarDecl ::= (VarDeclaration) IDENT:varName ArrOpt
            |
            (ErrorVarDecl) error
            {: parser.report_error("Bad variable declaration! ", null); :}
            ;

ArrOpt ::= (ArrayOption) LSQBRACE RSQBRACE
            |
            (NoArrayOption)
            ;


EnumDecl ::= (EnumDecl) EnumStart LBRACE EnumList RBRACE;

EnumStart ::= (EnumStart) ENUM IDENT:eName;

EnumList ::= (EnumMembersList) EnumList COMMA EnumMember
            | (SingleEnumMember) EnumMember
            ;

EnumMember ::= (EnumMember) IDENT:enumMemberName EnumInit;

EnumInit ::= (SingleEnumInit) ASSIGNMENT NUMBER:enumMemberValue
              |
              (NoEnumInit)
              ;

MethodDeclList ::= (MethodDeclarationList) MethodDeclList MethodDecl
					|
					(NoMethodDecl)/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodStart LPAREN FormParams RPAREN OptVars LBRACE Statements RBRACE;

MethodStart ::= (MethodStart) RetType IDENT:methodName;

RetType ::= (RetVoid) VOID:retVoid
            |
            (ReturnType) Type:retType;

FormParams ::= (FormParamsDeclaration) FormParams COMMA FormPara
              | (SingleFormParametarDeclaration) FormPara
              | (NoFormParamsDeclaration)
              |
              error
              {: parser.report_error("Bad formal argument  ", null); :}
              ;

FormPara ::= (FormPara) Type:paramType IDENT:paramName ArrOpt;


Statements ::= (StatementList) Statements Statement
               |
               (NoStatementList)
               ;

Statement ::= (DesignatorStatement) DesignatorStmt SEMI
			  |
              Designator AssignOp error SEMI:l
              {: parser.report_error("Bad assignment statement until ; on line " + lleft, null); :}
              |
			  (IfStatement) IF IfConditionForm Statement
			  |
			  (IfElseStatement) IF IfConditionForm Statement ELSE Statement
			  |
			  (ForStatement) FOR LPAREN OptDesignatorStatement SEMI OptCondition SEMI OptDesignatorStatement RPAREN Statement
			  |
			  (BreakStatement) BREAK SEMI
			  |
			  (ContinueStatement) CONTINUE SEMI
			  |
			  (ReadStatement) READ LPAREN Designator:dest RPAREN SEMI
			  |
			  (PrintStatement) PRINT LPAREN  ExpressionToPrint RPAREN SEMI
			  |
			  (ReturnExpStatement) RETURN Expr:retExp SEMI
			  |
			  (ReturnNopStatement) RETURN SEMI
			  |
			  (StatementBlock) LBRACE Statements RBRACE
			  ;

OptDesignatorStatement ::= (SingleDesignatorStatement) DesignatorStmt
                           |
                           (NoDesignatorStatement)
                           ;

IfConditionForm ::= (IfCondition) LPAREN ConditionDecl RPAREN
                    |
                    (ConditionError) LPAREN error RPAREN:l
                    {: parser.report_error("Bad condition at line " + lleft, null); :}
                    ;

OptCondition::= (Condition) ConditionDecl
                |
                (NoCondition)
                ;

ExpressionToPrint ::= (ExpressionToPrintList) ExpressionToPrint COMMA NUMBER:value
                      |
                      (SingleExpressionToPrint) Expr:exprToPrint
                      ;

DesignatorStmt ::= (AssignDesignatorStatement) Designator:dest AssignOp Expr:expValue
                   |
                   (ParametarsDesignatorStatement) Designator:dest LPAREN ActualPars RPAREN
                   |
                   (IncDesignatorStatement) Designator:dest INC
                   |
                   (DecDesignatorStatement) Designator:dest DEC
                   |
                   (SimpleDesignatorStatement) Designator:dest
                   ;

ConditionDecl ::= (TermListCondition) ConditionDecl OR CondTerm
              |
              (SingleTermCondition) CondTerm
              ;

CondTerm ::= (CondFactListTerm) CondFact AND CondFact
             |
             (SingleCondFactTerm) CondFact
             ;

CondFact ::= (ConditionFactor) CondFact RelOp Expr
             |
             (SingleCondFact) Expr
             ;

Expr ::= (TermListExpr) Expr Addop Term
          |
          (SingleTermExpr) SignTerm
          ;

SignTerm ::= (MinusTerm) MINUS Term
             |
             (NoSignTerm) Term
             ;

Term ::= (FactorListTerm) Term MulOp Factor
         |
         (SingleFactorTerm) Factor
         ;

Factor ::= (ParenFactor) LPAREN Expr RPAREN
		   |
		   (CharFactor) CHARCONST:valueChar
		   |
		   (BoolFactor) BOOL_CONST:valBool
		   |
		   (NewTypeFactor) NEW Type LSQBRACE Expr:arrExp RSQBRACE
		   |
		   (DesignatorFactor) Designator:d
		   |
		   (FunCallFactor) Designator:func LPAREN ActualPars RPAREN
		   |
		   (NumberFactor) NUMBER:valueNumber
		   ;

ActualPars ::= (ActualParametarsList) ActualParamList
			   |
			   (NoActualParametarsList)
			   ;

ActualParamList ::= (ParametarsList) ActualParamList COMMA Expr
					 |
					 (SingleExpr) Expr
					 ;

Designator ::= (EnumDesignator) IDENT:designatorName DOT IDENT:enumMember
               |
               (ArrayDesignator) IDENT:designatorName LSQBRACE Expr:arrExp RSQBRACE
               |
               (SimpleDesignator) IDENT:designatorName
               ;

AssignOp ::= (Assignment) ASSIGNMENT;

RelOp ::= (Equal) EQUAL
          |
          (Unequal) UNEQUAL
          |
          (Greater) GREATER
          |
          (GreaterEqual) GREATER_EQUAL
          |
          (Smaller)SMALLER
          |
          (SmallerEqual) SMALLER_EQUAL
          ;

Addop ::= (PlusOp) PLUS
          |
          (MinusOp) MINUS
          ;

MulOp ::= (MulOp) MUL
          |
          (DivOp) DIV
          |
          (ModOp) MOD
          ;


